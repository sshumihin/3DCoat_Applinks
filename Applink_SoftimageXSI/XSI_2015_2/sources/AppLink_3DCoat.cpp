// AppLink_3DCoat
// Initial code generated by Softimage SDK Wizard
// Executed Wed May 25 20:17:39 UTC+0700 2011 by sshadows
// 
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager. 
#include <iostream>
#include <fstream>
#include <string>

#include <xsi_application.h>
#include <xsi_context.h>
#include <xsi_command.h>
#include <xsi_customproperty.h>
#include <xsi_filereference.h>
#include <xsi_menu.h>
#include <xsi_model.h>
#include <xsi_pluginregistrar.h>
#include <xsi_ppglayout.h>
#include <xsi_ref.h>
#include <xsi_status.h>
#include <xsi_progressbar.h>
#include <xsi_uitoolkit.h>
#include <xsi_utils.h>
#include <xsi_value.h>
#include <windows.h>

using namespace XSI;
Application app;
extern CString pluginPath;

// Setup the progress bar
UIToolkit kit = app.GetUIToolkit();
ProgressBar bar = kit.GetProgressBar();

extern CustomProperty Get3DCoatProp();

SICALLBACK XSILoadPlugin( PluginRegistrar& in_reg )
{
	in_reg.PutAuthor(L"Svyatoslav Shumikhin");
	in_reg.PutName(L"AppLink_3DCoat_Plugin");
	in_reg.PutVersion(1,5);
	in_reg.PutHelp("http://www.3d-coat.com/forum/index.php");
	//RegistrationInsertionPoint - do not remove this line

	// Register commands for importing and exporting a polygon mesh
	in_reg.RegisterCommand(L"Coat3DExport");
	in_reg.RegisterCommand(L"Coat3DImport");

	in_reg.RegisterEvent(L"siOnActivateEvent",siOnActivate);

	// Install a top-level menu for the import/export tool
	in_reg.RegisterMenu(siMenuMainTopLevelID, L"AppLink_3DCoat", false,false);
	in_reg.RegisterMenu(siMenuMainFileExportID,"Export3DCoatMenu",false);
	in_reg.RegisterMenu(siMenuMainFileImportID,"Import3DCoatMenu",false);


	// Register a custom property to use as the import/export UI	
	in_reg.RegisterProperty(L"AppLink_3DCoat");

	return CStatus::OK;
}

SICALLBACK XSIUnloadPlugin( const PluginRegistrar& in_reg )
{
	CString strPluginName;
	strPluginName = in_reg.GetName();
	app.LogMessage(strPluginName + L" has been unloaded.",siVerboseMsg);
	return CStatus::OK;
}

// Callback for the siOnActivateEvent event.
SICALLBACK siOnActivateEvent_OnEvent( CRef& in_ctxt )
{
	Context ctxt( in_ctxt );
	//Application().LogMessage(L"siOnActivateEvent_OnEvent called",siVerboseMsg);
	//Application().LogMessage(L"State: " + CString(ctxt.GetAttribute(L"State")),siVerboseMsg);

	bool bState = ctxt.GetAttribute(L"State");
	if(bState)
	{
		CustomProperty prop = app.GetActiveSceneRoot().GetProperties().GetItem(L"AppLink_3DCoat");
		if (prop.IsValid())
		{
			if(prop.GetParameter("bEvent").GetValue())
			{
				CString s_CoatLocation = prop.GetParameter(L"coatLocation").GetValue();
				CString exportPath = CUtils::BuildPath(s_CoatLocation, L"export.txt");
				CString objPath;

				std::ifstream fileref(exportPath.GetAsciiString());
				bool bfile = false;
				if(fileref.good())
				{
					std::string row;
					std::getline(fileref, row);
					objPath = row.c_str();
					bfile = true;
				}
				fileref.close();

				if(bfile)
				{				
					UIToolkit uitool = Application().GetUIToolkit();
					LONG out;
					uitool.MsgBox(L"Import file?", siMsgOkCancel|siMsgInformation|MB_APPLMODAL, L"", (LONG) out);
					if(out == siMsgOk)
					{
						app.LogMessage(L"Start Import!");
						CValueArray args(2);
						args[0] = objPath;
						args[1] = prop.GetParameterValue( L"bReplace" );
						CValue noret;
						app.ExecuteCommand( L"Coat3DImport", args, noret ) ;
					}
				}				
			}
		}
	}

// 	Return value is ignored as this event can not be aborted.
	return CStatus::OK;
}

SICALLBACK Export3DCoatMenu_Init(CRef& in_ctxt)
{
	Context ctxt( in_ctxt );

	Menu oMenu;
	MenuItem oNewItem;
	oMenu = ctxt.GetSource();
	oMenu.AddCallbackItem( L"3DCoat...", L"coatClicked", oNewItem );

	return CStatus::OK;
}
SICALLBACK Import3DCoatMenu_Init(CRef& in_ctxt)
{
	Context ctxt( in_ctxt );

	Menu oMenu;
	MenuItem oNewItem;
	oMenu = ctxt.GetSource();
	oMenu.AddCallbackItem( L"3DCoat...", L"coatClicked", oNewItem );

	return CStatus::OK;
}

SICALLBACK AppLink_3DCoat_Init( CRef& in_ctxt )
{
	Context ctxt( in_ctxt );

	Menu oMenu;
	oMenu = ctxt.GetSource();
	
	MenuItem oNewItem;
	oMenu.AddCallbackItem( L"Settings", L"coatClicked", oNewItem );
	
	return CStatus::OK;
}

SICALLBACK coatClicked( CRef& in_ref)
{	
	CustomProperty prop = Get3DCoatProp();

	CValue retVal;
	
	CValueArray args(5);
	args[0] = prop;
	args[3] = (LONG)siLock;
	
	app.ExecuteCommand( L"InspectObj", args, retVal );

	return CStatus::OK;
}